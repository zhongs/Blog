<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>javascript设计模式</title>
    <url>/2017/11/26/javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><img align="center" src="http://7xqrwh.com1.z0.glb.clouddn.com/image/designMode/1.jpg" width="80%" height="50%"><br>在合适的时间，看到合适的书是幸运的！文中的例子摘自《JavaScript设计模式与开发实践》这本书；<br><a id="more"></a></p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote>
<p>保证一个类仅有一个实例，并提供一个访问它的全局访问点；</p>
</blockquote>
<p>登录弹窗</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = <span class="string">'我是登录弹窗'</span>;</span><br><span class="line">    div.style.display = <span class="string">'none'</span>;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleLoginLayer = getSingle( createLoginLayer );</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = createSingleLoginLayer();</span><br><span class="line">    loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><blockquote>
<p>定义一系列的算法，把他们一个个封装起来，并且使它们可以相互替换</p>
</blockquote>
<p>表单验证</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//策略对象</span></span><br><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">    isNonEmpty: <span class="function"><span class="keyword">function</span>(<span class="params"> value, errorMsg </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( value===<span class="string">''</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    minLength: <span class="function"><span class="keyword">function</span>(<span class="params"> value, length, errorMsg </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( value.length &lt; length )&#123;</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    isMobile: <span class="function"><span class="keyword">function</span>(<span class="params"> value, errorMsg </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( !<span class="regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.test( value ) )&#123;</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Validator 类</span></span><br><span class="line"><span class="keyword">var</span> Validator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.cache = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Validator.prototype.add = <span class="function"><span class="keyword">function</span>(<span class="params"> dom, rules </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>, rule; rule = rules[ i++ ]; )&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params">rule</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> strategyAry = rule.strategy.split(<span class="string">':'</span>);</span><br><span class="line">            <span class="keyword">var</span> errorMsg = rule.errorMsg;</span><br><span class="line">            self.cache.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> strategy = strategyAry.shift();</span><br><span class="line">                strategyAry.unshift( dom.value );</span><br><span class="line">                strategyAry.push(errorMsg);</span><br><span class="line">                <span class="keyword">return</span> strategies[ strategy ].apply( dom, strategyAry );</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)(rule)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Validator.prototype.start = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i = <span class="number">0</span>, validatorFunc; validatorFunc = <span class="keyword">this</span>.cache[ i++ ]; )&#123;</span><br><span class="line">        <span class="keyword">var</span> errorMsg = validatorFunc();</span><br><span class="line">        <span class="keyword">if</span>( errorMsg )&#123;</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户调用代码</span></span><br><span class="line"><span class="keyword">var</span> registerForm = <span class="built_in">document</span>.getElementById( <span class="string">'registerForm'</span> );</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> validateFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> validator = <span class="keyword">new</span> Validator();</span><br><span class="line">    validator.add( registerForm.userName,</span><br><span class="line">     [&#123; <span class="attr">strategy</span>: <span class="string">'isNonEmpty'</span>, <span class="attr">errorMsg</span>: <span class="string">'用户名不能为空'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">strategy</span>: <span class="string">'minLength:10'</span>, <span class="attr">errorMsg</span>: <span class="string">'用户名长度不能小于10位'</span> &#125;]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    validator.add( registerForm.password,[&#123; </span><br><span class="line">        strategy: <span class="string">'minLength:6'</span>, </span><br><span class="line">        errorMsg: <span class="string">'密码长度不能小于6位'</span> </span><br><span class="line">        &#125;]);</span><br><span class="line"></span><br><span class="line">    validator.add( registerForm.phoneNumber,[&#123; </span><br><span class="line">        strategy: <span class="string">'isMobile'</span>, </span><br><span class="line">        errorMsg: <span class="string">'手机号码格式不正确'</span> </span><br><span class="line">        &#125;]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> errorMsg = validator.start();</span><br><span class="line">    <span class="keyword">return</span> errorMsg;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">registerForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> errorMsg = validataFunc();</span><br><span class="line">    <span class="keyword">if</span>( errorMsg )&#123;</span><br><span class="line">        alert( errorMsg );</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><blockquote>
<p>为一个对象提供一个代用品或占位符，以便控制对它的访问。</p>
</blockquote>
<p>图片预加载</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imgNode = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild( imgNode );</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        imgNode.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image;</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        myImage( <span class="keyword">this</span>.src );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> src </span>)</span>&#123;</span><br><span class="line">        myImage(<span class="string">'http://sucimg.itc.cn/avatarimg/903387522_1510992087902_c55'</span>);</span><br><span class="line">        img.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">proxyImage(<span class="string">'http://7xqrwh.com1.z0.glb.clouddn.com/image/designMode/1.jpg'</span>);</span><br></pre></td></tr></table></figure>
<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><blockquote>
<p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。</p>
</blockquote>
<p>外部迭代器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Iterator = <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        current += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> isDone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> current &gt;= obj.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> getCurrItem = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> obj[current];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next:next,</span><br><span class="line">        isDone:isDone,</span><br><span class="line">        getCurrItem:getCurrItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较2个数组是否相等</span></span><br><span class="line"><span class="keyword">var</span> compare = <span class="function"><span class="keyword">function</span>(<span class="params">iterator1, iterator2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!iterator1.isDone() &amp;&amp; !iterator2.isDone())&#123;</span><br><span class="line">        <span class="keyword">if</span>(iterator1.getCurrItem() !== iterator2.getCurrItem())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'iterator1 和 iterator2不相等'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        iteration1.next();</span><br><span class="line">        iteration2.next();</span><br><span class="line">    &#125;</span><br><span class="line">    alert(<span class="string">'iterator1 和 iterator2相等'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator1 = Iterator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">var</span> iterator2 = Iterator([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">cpmpare(iterator1, iterator2);</span><br></pre></td></tr></table></figure>
<p>倒序迭代器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseEach = <span class="function"><span class="keyword">function</span>(<span class="params">ary, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> l = arr.length - <span class="number">1</span>; l&gt;=<span class="number">0</span>; l--; )&#123;</span><br><span class="line">        callback(l, ary[l]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">reverseEach([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n);  <span class="comment">//2,1,0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>终止迭代器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> each = <span class="function"><span class="keyword">function</span>(<span class="params">ary, callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>; i&lt;ary.length; i&lt;l; i++ )&#123;</span><br><span class="line">        <span class="keyword">if</span>( callback(i, ary[i]) === <span class="literal">false</span> )&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="function"><span class="keyword">function</span>(<span class="params">i, n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(n); <span class="comment">//1,2,3</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h2><blockquote>
<p>发布订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。</p>
</blockquote>
<p>全局的发布订阅对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clientList = &#123;&#125;,</span><br><span class="line">        listen,</span><br><span class="line">        trigger,</span><br><span class="line">        remove;</span><br><span class="line"></span><br><span class="line">    listen = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( !clientList[key] )&#123;</span><br><span class="line">            clientList[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        clientList[key].push(fn);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call( <span class="built_in">arguments</span> );</span><br><span class="line">            fns = clientList[key];</span><br><span class="line">            <span class="keyword">if</span>(!fns || fns.length === <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, fn; fn = fns[i++];)&#123;</span><br><span class="line">                fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    remove = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fns = clientList[key];</span><br><span class="line">        <span class="keyword">if</span>(!fns)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!fn)&#123;</span><br><span class="line">            fns &amp;&amp; ( fns.length = <span class="number">0</span> ); <span class="comment">//没有传fn就remove所有的订阅消息</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> l = fns.length<span class="number">-1</span>; l&gt;=<span class="number">0</span>; l--)&#123;</span><br><span class="line">                <span class="keyword">var</span> _fn = fns[l];</span><br><span class="line">                <span class="keyword">if</span>(_fn === fn)&#123;</span><br><span class="line">                    fns.splice(l, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        listen: listen,</span><br><span class="line">        trigger: trigger,</span><br><span class="line">        remove: remove</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">Event.listen(<span class="string">'squareMeter88'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">price</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'价格='</span>+price);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Event.trigger(<span class="string">'squareMeter88'</span>, <span class="number">2000000</span>);</span><br></pre></td></tr></table></figure>
<p>可以先发布在订阅的发布订阅模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> global = <span class="keyword">this</span>,</span><br><span class="line">        Event,</span><br><span class="line">        _default = <span class="string">'default'</span>;</span><br><span class="line">    Event = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _listen, _trigger, _remove,</span><br><span class="line">            _slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">            _shift = <span class="built_in">Array</span>.prototype.shift,</span><br><span class="line">            _unshift = <span class="built_in">Array</span>.prototype.unshift,</span><br><span class="line">            namespaceCache = &#123;&#125;,</span><br><span class="line">            _create,</span><br><span class="line">            find,</span><br><span class="line">            each = <span class="function"><span class="keyword">function</span>(<span class="params"> ary, fn </span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> ret;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, l=ary.length; i&lt;l; i++)&#123;</span><br><span class="line">                    <span class="keyword">var</span> n = ary[i];</span><br><span class="line">                    ret = fn.call(n, i, n);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;;</span><br><span class="line">            _listen = <span class="function"><span class="keyword">function</span>(<span class="params"> key, fn, cache </span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>( !cache[key] )&#123;</span><br><span class="line">                    cache[key] = [];</span><br><span class="line">                &#125;</span><br><span class="line">                cache[key].push(fn);</span><br><span class="line">            &#125;;</span><br><span class="line">            _remove = <span class="function"><span class="keyword">function</span>(<span class="params"> key, cache, fn </span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>( cache[key] )&#123;</span><br><span class="line">                    <span class="keyword">if</span>(fn)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i=cache[key].length; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(cache[key][i]===fn)&#123;</span><br><span class="line">                                cache[key].splice(i, <span class="number">1</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        cache[key] = [];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            _trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> cache = _shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">                    key = _shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">                    args = <span class="built_in">arguments</span>,</span><br><span class="line">                    _self = <span class="keyword">this</span>,</span><br><span class="line">                    ret,</span><br><span class="line">                    stack = cache[key];</span><br><span class="line">                <span class="keyword">if</span>(!stack || !stack.length)&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> each(stack, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.apply(_self, args);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;;</span><br><span class="line">            _create = <span class="function"><span class="keyword">function</span>(<span class="params">namespace</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> namespace = namespace || _default;</span><br><span class="line">                <span class="keyword">var</span> cache = &#123;&#125;,</span><br><span class="line">                    offlineStack = [],</span><br><span class="line">                    ret = &#123;</span><br><span class="line">                        listen: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, last</span>)</span>&#123;</span><br><span class="line">                            _listen(key, fn, cache);</span><br><span class="line">                            <span class="keyword">if</span>(offlineStack === <span class="literal">null</span>)&#123;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(last === <span class="string">'last'</span>)&#123;</span><br><span class="line">                                offlineStack.length &amp;&amp; offlineStack.pop()();</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                each(offlineStack, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                                    <span class="keyword">this</span>();</span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                            offlienStack = <span class="literal">null</span>;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        one: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, last</span>)</span>&#123;</span><br><span class="line">                            _remove(key, cache);</span><br><span class="line">                            <span class="keyword">this</span>.listen(key, fn, last);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        remove: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>)</span>&#123;</span><br><span class="line">                            _remvoe(key, cache, fn);</span><br><span class="line">                        &#125;,</span><br><span class="line">                        trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                            <span class="keyword">var</span> fn,</span><br><span class="line">                                args,</span><br><span class="line">                                _self = <span class="keyword">this</span>;</span><br><span class="line">                            _unshift.call(<span class="built_in">arguments</span>, cache);</span><br><span class="line">                            args = <span class="built_in">arguments</span>;</span><br><span class="line">                            fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                                <span class="keyword">return</span> _trigger.apply(_self, args);</span><br><span class="line">                            &#125;;</span><br><span class="line">                            <span class="keyword">if</span>(offlineStack)&#123;</span><br><span class="line">                                <span class="keyword">return</span> offlineStack.push(fn);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">return</span> fn();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="keyword">return</span> namespace ? ( namespaceCache[ namespace ] ? namespaceCache[ namespace ] : namespaceCache[ namespace ] = ret ) : ret;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                create: _create,</span><br><span class="line">                one: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, last</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                        event.one(key, fn, last);</span><br><span class="line">                &#125;,</span><br><span class="line">                remove: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                        event.remove( key, fn );</span><br><span class="line">                &#125;,</span><br><span class="line">                listen: <span class="function"><span class="keyword">function</span>(<span class="params">key, fn, last</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                        event.listen(key, fn, last);</span><br><span class="line">                &#125;,</span><br><span class="line">                trigger: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> event = <span class="keyword">this</span>.create();</span><br><span class="line">                    event.trigger.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">    &#125;();</span><br><span class="line">    <span class="keyword">return</span> Event;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//先发布后订阅</span></span><br><span class="line">Event.trigger(<span class="string">'click'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Event.listen(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用命名空间</span></span><br><span class="line">Event.create(<span class="string">'namespace1'</span>).listen(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Event.create(<span class="string">'namepace1'</span>).trigger(<span class="string">'click'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Event.create(<span class="string">'namespace2'</span>).listen(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Event.create(<span class="string">'namepace2'</span>).trigger(<span class="string">'click'</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><blockquote>
<p>命令模式是最简单和优雅的模式之一，命令模式中的命令指的是一个执行某些特定事情的指令。</p>
</blockquote>
<p>菜单程序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="function"><span class="keyword">function</span>(<span class="params">button, command</span>)</span>&#123;</span><br><span class="line">    button.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MenuBar = &#123;</span><br><span class="line">    refresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'刷新菜单目录'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> SubMenu = &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'添加子菜单'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    del: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'删除子菜单'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> RefreshMenuBarCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">RefreshMenuBarCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver.refresh();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> AddSubMenuCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">AddSubMenuCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver.add();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DelSubMenuCommand = <span class="function"><span class="keyword">function</span>(<span class="params">receiver</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.receiver = receiver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DelSubMenuCommand.prototype.execute = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'删除子菜单'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = <span class="keyword">new</span> RefreshMenuBarCommand(MenuBar);</span><br><span class="line"><span class="keyword">var</span> addSubMenuCommand = <span class="keyword">new</span> AddSubMenuCommand(SubMenu);</span><br><span class="line"><span class="keyword">var</span> delSubMenuCommand = <span class="keyword">new</span> DelSubMenuCommand(SubMenu);</span><br><span class="line"></span><br><span class="line">setCommand(button1, refreshMenuBarCommand);</span><br><span class="line">setCommand(button2, addSubMenuCommand);</span><br><span class="line">setCommand(button3, delSubMenuCommand);</span><br></pre></td></tr></table></figure>
<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><blockquote>
<p>组合模式就是用小的子对象来构建更大的对象，而这些小的对象本身也许是由更小的“孙对象”构成的。</p>
</blockquote>
<p>更强大的宏命令</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MacroCommand = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        commandsList:[],</span><br><span class="line">        add:<span class="function"><span class="keyword">function</span>(<span class="params">command</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.commandsList.push( command );</span><br><span class="line">        &#125;,</span><br><span class="line">        execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, command; command = <span class="keyword">this</span>.commandsList[ i++ ];)&#123;</span><br><span class="line">                command.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> openAcCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'打开空调'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//组合对象</span></span><br><span class="line"><span class="keyword">var</span> openTvCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'打开电视'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> openSoundCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'打开音响'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> macroCommand1 = MacroCommand();</span><br><span class="line">macroCommand1.add(openTvCommand);</span><br><span class="line">macroCommand1.add(openSoundCommand);</span><br><span class="line"></span><br><span class="line"><span class="comment">//组合对象</span></span><br><span class="line"><span class="keyword">var</span> closeDoorCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'关门'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> closePcCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'打开电脑'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> closeQQCommand = &#123;</span><br><span class="line">    execute: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'登录'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> macroCommand2 = MacroCommand();</span><br><span class="line">macroCommand2.add(closeDoorCommand);</span><br><span class="line">macroCommand2.add(closePcCommand);</span><br><span class="line">macroCommand2.add(closeQQCommand);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根组合对象</span></span><br><span class="line"><span class="keyword">var</span> macroCommand = MacroCommand();</span><br><span class="line">macroCommand.add(openAcCommand);</span><br><span class="line">macroCommand.add(macroCommand1);</span><br><span class="line">macroCommand.add(macroCommand2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//组合对象是一个树形结构，它会被递归调用</span></span><br><span class="line"><span class="keyword">var</span> setCommand = (<span class="function"><span class="keyword">function</span>(<span class="params">command</span>)</span>&#123;</span><br><span class="line">    command.execute();</span><br><span class="line">&#125;)(macroCommand);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu系统部署nodejs项目</title>
    <url>/2017/11/15/Ubuntu%E7%B3%BB%E7%BB%9F%E9%83%A8%E7%BD%B2nodejs%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p><img align="center" src="http://7xqrwh.com1.z0.glb.clouddn.com/image/deploy/banner.jpg" width="80%" height="50%"><br>最初学习nodejs，用express写了个项目，想部署到服务器运行；从来没有接触过服务器的我，对于项目的部署是一个模糊的概念；也搜索了很多部署相关的文章，看着也是晕头晕脑的没有看懂；这篇文章主要记录，我的部署过程；<br><a id="more"></a></p>
<h2 id="购买服务器"><a href="#购买服务器" class="headerlink" title="购买服务器"></a>购买服务器</h2><p>我买的是阿里云服务器</p>
<ul>
<li>操作系统：Ubuntu 14.04 64位</li>
<li>cpu：1核</li>
<li>内存：1GB</li>
<li>高效云盘：40GB</li>
</ul>
<p>买的最便宜的那一种，也不贵一年才330；</p>
<p>阿里云 <a href="https://www.aliyun.com" target="_blank" rel="noopener">https://www.aliyun.com</a></p>
<p>1.注册进入首页<br>2.点击<code>控制台</code>，进入控制台管理页面<br>3.点击<code>云服务器ECS</code><br>4.点击<code>实例</code><br>5.在点击最右边的<code>创建实例</code></p>
<p>进入到创建实例页面，选择相应选项购买完了，回到管理控制台页面；能看见刚购买的实例；<br>还有一定要记住好服务器密码；</p>
<p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/deploy/1.png" alt="实例"></p>
<p>在windows上安装<a href="http://www.netsarang.com/products/xsh_overview.html" target="_blank">Xshell</a><br>安装成功以后，打开Xshell通过</p>
<ul>
<li>服务器id</li>
<li>服务器密码</li>
</ul>
<p>登录你的服务器</p>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>添加用户<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo adduser zs</span><br></pre></td></tr></table></figure></p>
<p>赋予用户权限<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sudoers</span><br><span class="line"></span><br><span class="line">root   ALL=(ALL:ALL) ALL   <span class="comment">//找到这个位置</span></span><br><span class="line">zs     ALL=(ALL:ALL) ALL   <span class="comment">//添加这一行</span></span><br></pre></td></tr></table></figure></p>
<p>切换用户<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">su - zs</span><br></pre></td></tr></table></figure></p>
<h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><ul>
<li>更新软件厂库</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> update</span><br></pre></td></tr></table></figure>
<ul>
<li>安装git</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install git</span><br><span class="line">git --version   //查看git版本，git是否安装成功</span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://github.com/creationix/nvm" target="_blank">安装nvm</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">curl -o- https:<span class="comment">//raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果提示：To run 'curl' please ask your administrator to install the package 'curl'</span></span><br><span class="line"><span class="comment">//需要先安装curl模块，在安装nvm</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> install curl</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入nvm --version，如果报错 nvm: command not found</span></span><br><span class="line">source ~<span class="regexp">/.bashrc</span></span><br></pre></td></tr></table></figure>
<ul>
<li>安装nodejs</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">nvm install <span class="number">6</span>  <span class="comment">//会安装nodejs 6的最新版本</span></span><br><span class="line">nvm alias <span class="keyword">default</span> <span class="number">6.11</span><span class="number">.4</span> <span class="comment">//设置默认版本</span></span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/" target="_blank">安装mongoDB数据库</a></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp:<span class="comment">//keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这一步安装需要注意，你的Ubuntu 版本</span></span><br><span class="line">echo <span class="string">"deb [ arch=amd64 ] http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.4 multiverse"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org<span class="number">-3.4</span>.list</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> update</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install -y mongodb-org</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动数据库</span></span><br><span class="line">sudo service mongod start</span><br><span class="line"></span><br><span class="line"><span class="comment">//waiting for connections on port 27017 说明启动成功了</span></span><br><span class="line">vi /<span class="keyword">var</span>/log/mongodb/mongod.log</span><br></pre></td></tr></table></figure>
<ul>
<li>安装pm2</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure>
<ul>
<li>安装nginx</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install nginx</span><br><span class="line"></span><br><span class="line">//开机启动</span><br><span class="line">sudo apt-<span class="keyword">get</span> install sysv-rc-conf</span><br><span class="line">sudo sysv-rc-conf nginx on</span><br></pre></td></tr></table></figure>
<h2 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h2><p>软件安装的都差不多了，我用的是sublime text编辑器sftp软件上传代码；</p>
<p>在root用户下给zs临时用户添加权限 chown -R zs.zs /work/nbdemo/</p>
<p>此时，可以通过sftp把本地的项目文件上传到服务器的/work/nbdemo/目录下</p>
<p>sftp-config.json 文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"sftp"</span>,</span><br><span class="line">    <span class="attr">"save_before_upload"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"upload_on_save"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"sync_down_on_open"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"sync_skip_deletes"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"sync_same_age"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"confirm_downloads"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"confirm_sync"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"confirm_overwrite_newer"</span>: <span class="literal">false</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"服务器ip地址"</span>,</span><br><span class="line">    <span class="attr">"user"</span>: <span class="string">"用户名"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">"用户密码"</span>,</span><br><span class="line">    <span class="comment">//"port": "22",</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">"remote_path"</span>: <span class="string">"要上传到服务器的目录路径"</span>,</span><br><span class="line">    <span class="comment">//忽略上传的文件</span></span><br><span class="line">    <span class="attr">"ignore_regexes"</span>: [</span><br><span class="line">        <span class="string">"\\.sublime-(project|workspace)"</span>, <span class="string">"sftp-config(-alt\\d?)?\\.json"</span>,</span><br><span class="line">        <span class="string">"sftp-settings\\.json"</span>, <span class="string">"/venv/"</span>, <span class="string">"\\.svn/"</span>, <span class="string">"\\.hg/"</span>, <span class="string">"\\.git/"</span>,</span><br><span class="line">        <span class="string">"\\.bzr"</span>, <span class="string">"_darcs"</span>, <span class="string">"CVS"</span>, <span class="string">"\\.DS_Store"</span>, <span class="string">"Thumbs\\.db"</span>, <span class="string">"desktop\\.ini"</span>,<span class="string">"node_modules"</span>,<span class="string">"./db/"</span></span><br><span class="line">    ]</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="一个坑"><a href="#一个坑" class="headerlink" title="一个坑"></a>一个坑</h3><p>代码上传上去了之后，并成功运行pm2 start ./bin/www</p>
<p>在浏览器地址栏输入服务器ip，不能访问；弄了好几个小时；才发现是要在阿里云控制台，配置安全组；</p>
<p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/deploy/11.png" alt="实例"></p>
<p>后面就可以访问了；</p>
<p>我这里是通过nginx做的端口代理，项目本身是8080端口；</p>
<p>nginx 代理文件， nbdemo-con-8080.conf</p>
<p>文件放在 /etc/nginx/conf.d/目录下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">upstream test&#123;</span><br><span class="line">    server <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name <span class="number">47.95</span><span class="number">.221</span><span class="number">.113</span>;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">        proxy_set_header X-NginX-<span class="built_in">Proxy</span> <span class="literal">true</span>;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_pass http:<span class="comment">//test;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，代码部署就差不多完了，项目也可以访问了；</p>
]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>分类侧边栏</title>
    <url>/2017/11/07/%E5%88%86%E7%B1%BB%E4%BE%A7%E8%BE%B9%E6%A0%8F/</url>
    <content><![CDATA[<p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/sidebar/timg.jpg" width="80%" height="50%"><br>模仿京东商城分类侧边栏效果，实现一个分类侧边栏demo<br><a id="more"></a></p>
<h2 id="京东商城界面"><a href="#京东商城界面" class="headerlink" title="京东商城界面"></a>京东商城界面</h2><h3 id="界面图"><a href="#界面图" class="headerlink" title="界面图"></a>界面图</h3><p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/sidebar/1.png" alt="动画效果"></p>
<h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ul>
<li>当前项在可移动范围内，始终相对于商品区域垂直居中</li>
<li>当前项颜色会变红</li>
</ul>
<h2 id="我实现的demo"><a href="#我实现的demo" class="headerlink" title="我实现的demo"></a>我实现的demo</h2><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/sidebar/ggg.gif" alt="动画效果"></p>
<h3 id="第一个demo"><a href="#第一个demo" class="headerlink" title="第一个demo"></a>第一个demo</h3><p><a href="https://zhongs.github.io/scroll/sidebar_scroll/demo0.html" target="_blank" rel="noopener">demo地址</a></p>
<ul>
<li>没有滚动效果</li>
<li>在不使用jquery的情况下，想给内滚动加上过度效果，得自己实现一个；当然zepto也没实现能改变scrollTop的动画函数</li>
</ul>
<h3 id="第二个demo"><a href="#第二个demo" class="headerlink" title="第二个demo"></a>第二个demo</h3><p><a href="https://zhongs.github.io/scroll/sidebar_scroll/demo1.html" target="_blank" rel="noopener">demo地址</a></p>
<ul>
<li>加上滚动效果</li>
</ul>
<h3 id="第三个demo"><a href="#第三个demo" class="headerlink" title="第三个demo"></a>第三个demo</h3><p><a href="https://zhongs.github.io/scroll/sidebar_scroll/demo2.html" target="_blank" rel="noopener">demo地址</a></p>
<ul>
<li>加上了tween缓冲效果</li>
</ul>
<h3 id="项目源码地址"><a href="#项目源码地址" class="headerlink" title="项目源码地址"></a><a href="https://github.com/zhongs/scroll/tree/master/sidebar_scroll" target="_blank">项目源码地址</a></h3>]]></content>
      <tags>
        <tag>滚动</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs发短信验证码</title>
    <url>/2017/11/27/nodejs%E5%8F%91%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    <content><![CDATA[<p><img align="center" src="http://7xqrwh.com1.z0.glb.clouddn.com/image/nodesms/timg.jpg" width="80%" height="50%"></p>
<p>用nodejs发短信验证码的一次实践</p>
<a id="more"></a>
<h2 id="网易云平台"><a href="#网易云平台" class="headerlink" title="网易云平台"></a><a href="http://netease.im/" target="_blank" rel="noopener">网易云平台</a></h2><ul>
<li>登录网易云，创建应用，找到应用的 App Key , App Secret</li>
</ul>
<p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/nodesms/key.png" alt="图片"></p>
<ul>
<li><p><a href="http://dev.netease.im/docs/product/%E7%9F%AD%E4%BF%A1/%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3%E6%8C%87%E5%8D%97?#发送短信/语音短信验证码" target="_blank" rel="noopener">短信接入指引</a></p>
</li>
<li><p><a href="http://dev.netease.im/docs/product/IM%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF/%E6%9C%8D%E5%8A%A1%E7%AB%AFAPI%E6%96%87%E6%A1%A3/%E6%8E%A5%E5%8F%A3%E6%A6%82%E8%BF%B0?#API调用说明" target="_blank" rel="noopener">接口概述</a></p>
</li>
</ul>
<h2 id="业务代码"><a href="#业务代码" class="headerlink" title="业务代码"></a>业务代码</h2><p>项目依赖的第三方模块</p>
<ul>
<li>request</li>
<li>sha1</li>
</ul>
<p>请求配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  url: <span class="string">"https://api.netease.im/sms/sendcode.action"</span>,</span><br><span class="line">  method: <span class="string">"POST"</span>,</span><br><span class="line">  body: <span class="string">"mobile=13871441556"</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>生成CheckSum,返回请求headers对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> createCheckSum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> AppKey = <span class="string">"xxxxxxxxxxxxxxxx"</span>;</span><br><span class="line">  <span class="keyword">const</span> AppSecret = <span class="string">"xxxxxxxxxxxxxxxxx"</span>;</span><br><span class="line">  <span class="keyword">const</span> CurTime = <span class="built_in">parseInt</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>) + <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">const</span> Nonce = <span class="built_in">Math</span>.random()</span><br><span class="line">  .toString(<span class="number">36</span>)</span><br><span class="line">  .substr(<span class="number">2</span>, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> str = AppSecret + Nonce + CurTime;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; AppKey, CurTime, <span class="attr">CheckSum</span>: sha1(str), Nonce &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在控制台输入node sendsms 调用代码 (我的js文件名叫sendsms)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.assign(options.headers, createCheckSum());</span><br><span class="line"></span><br><span class="line">request(options, (error, response, body) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"body:"</span>, body);  <span class="comment">//body: &#123;"code":200,"msg":"3","obj":"1599"&#125;</span></span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> info = <span class="built_in">JSON</span>.parse(body);</span><br><span class="line">  <span class="keyword">if</span> (info.code == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">//其它业务代码</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>手机收到的短信验证码</p>
<p><img align="center" src="http://7xqrwh.com1.z0.glb.clouddn.com/image/nodesms/b.jpg" width="40%"></p>
]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs发邮件</title>
    <url>/2017/11/30/nodejs%E5%8F%91%E9%82%AE%E4%BB%B6/</url>
    <content><![CDATA[<p><img align="center" src="http://7xqrwh.com1.z0.glb.clouddn.com/image/nodesms/timg.jpg" width="80%" height="50%"></p>
<p>用nodejs发送邮件</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">"nodemailer"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//http://blog.csdn.net/zzwwjjdj1/article/details/51878392</span></span><br><span class="line"></span><br><span class="line">nodemailer.createTestAccount(<span class="function">(<span class="params">err, account</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> transporter = nodemailer.createTransport(&#123;</span><br><span class="line">    service: <span class="string">"qq"</span>,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      user: <span class="string">"191492580@qq.com"</span>, <span class="comment">// 发送人邮箱</span></span><br><span class="line">      pass: <span class="string">"xxxxxxxxxxxxxxxxx"</span> <span class="comment">// 进入QQ个人邮箱, 设置-账户-开启服务POP3/SMTP服务,并生成授权码,现在获取授权码需要验证手机号等.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> mailOptions = &#123;</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">"191492580@qq.com"</span>,  <span class="comment">// 发送人邮箱</span></span><br><span class="line">    to: <span class="string">"826177087@qq.com"</span>,   <span class="comment">//接收人邮箱</span></span><br><span class="line">    subject: <span class="string">"Hello ✔"</span>,</span><br><span class="line">    <span class="comment">// text: "Hello world?", // 接受者,可以同时发送多个,以逗号隔开</span></span><br><span class="line">    <span class="comment">//定义内容</span></span><br><span class="line">    html: <span class="string">` </span></span><br><span class="line"><span class="string">    &lt;h2&gt;hello &lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;a href="https://github.com/"&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    <span class="comment">//发文件</span></span><br><span class="line">    attachments: [</span><br><span class="line">      &#123; <span class="attr">filename</span>: <span class="string">"package.json"</span>, <span class="attr">path</span>: <span class="string">"./package.json"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">filename</span>: <span class="string">"content"</span>, <span class="attr">content</span>: <span class="string">"发送内容"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;; </span><br><span class="line"></span><br><span class="line">  transporter.sendMail(mailOptions, (error, info) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Message sent: %s"</span>, info.messageId);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Preview URL: %s"</span>, nodemailer.getTestMessageUrl(info));</span><br><span class="line">    <span class="comment">// Message sent: &lt;b658f8ca-6296-ccf4-8306-87d57a0b4321@blurdybloop.com&gt;</span></span><br><span class="line">    <span class="comment">// Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>实现逐帧动画的几种方式</title>
    <url>/2017/10/23/%E5%AE%9E%E7%8E%B0%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/frameAni/timg.jpg" width="80%" height="50%"><br>公司有个特效师，专门做这样的帧动画图片，做好后就给到前端，来实现一张一张图片切换播放的动画；我用了canvas，css的animation，图片的image标签，以及图片转码base64的几种方式，分别实现了逐帧动画效果；<br><a id="more"></a></p>
<h2 id="用canvas实现"><a href="#用canvas实现" class="headerlink" title="用canvas实现"></a>用canvas实现</h2><h3 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h3><p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/frameAni/ani.gif" alt="动画效果"><br><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/frameAni/img.png" alt="图片"><br><a href="https://zhongs.github.io/frame-animation/canvas/index.html" target="_blank" rel="noopener">canvas demo地址</a></p>
<h3 id="首先加载设计师给我的图片"><a href="#首先加载设计师给我的图片" class="headerlink" title="首先加载设计师给我的图片"></a>首先加载设计师给我的图片</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建要加载的图片</span></span><br><span class="line"><span class="keyword">var</span> imgs = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imgsArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">21</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> imgSrc = <span class="string">`./img/<span class="subst">$&#123;i&#125;</span>.png`</span>;</span><br><span class="line">        imgsArr.push(imgSrc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> imgsArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.加载图片</span></span><br><span class="line"><span class="keyword">var</span> loadImgs = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loaded = <span class="number">0</span>; <span class="comment">//记录已经加载图片的个数</span></span><br><span class="line">    <span class="keyword">var</span> loadedImgsArr = []; <span class="comment">//用来存放加载的图片</span></span><br><span class="line">    <span class="keyword">var</span> imgsArr = imgs();</span><br><span class="line">    <span class="keyword">var</span> imgObj = <span class="literal">null</span>;</span><br><span class="line">    imgsArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">        imgObj = <span class="keyword">new</span> Image();</span><br><span class="line">        imgObj.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            loaded++;</span><br><span class="line">            <span class="comment">//这里所有的图片加载完成</span></span><br><span class="line">            <span class="keyword">if</span> (loaded == imgsArr.length) &#123;</span><br><span class="line">                fn &amp;&amp; fn(loadedImgsArr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        imgObj.src = imgsArr[index];</span><br><span class="line">        loadedImgsArr.push(imgObj);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用canvas的drawImage-Api"><a href="#使用canvas的drawImage-Api" class="headerlink" title="使用canvas的drawImage Api"></a>使用canvas的drawImage Api</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.配置参数</span></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    fps: <span class="number">10</span>, <span class="comment">//帧率</span></span><br><span class="line">    parentBox: <span class="built_in">document</span>.querySelectorAll(<span class="string">'.ani-box'</span>)[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.创建canvas</span></span><br><span class="line"><span class="keyword">var</span> createCanvas = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">    config.parentBox.appendChild(canvas);</span><br><span class="line">    <span class="keyword">var</span> &#123; offsetWidth, offsetHeight &#125; = canvas.parentNode;</span><br><span class="line">    canvas.width = offsetWidth;</span><br><span class="line">    canvas.height = offsetHeight;</span><br><span class="line">    <span class="keyword">return</span> canvas;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.有了图片和canvas对象，创建动画函数</span></span><br><span class="line"><span class="keyword">var</span> ani = <span class="function"><span class="keyword">function</span>(<span class="params">imgsArr, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = createCanvas();</span><br><span class="line">    <span class="comment">//图片的宽高</span></span><br><span class="line">    <span class="keyword">var</span> offsetWidth = imgsArr[<span class="number">0</span>].width;</span><br><span class="line">    <span class="keyword">var</span> offsetHeight = imgsArr[<span class="number">0</span>].height;</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//清屏</span></span><br><span class="line">        ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制图片        </span></span><br><span class="line">        ctx.drawImage(</span><br><span class="line">            imgsArr[n],</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, offsetWidth, offsetHeight,</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        n++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//播放到最后一张图片</span></span><br><span class="line">        <span class="keyword">if</span> (n == imgsArr.length) &#123;</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">            cb &amp;&amp; cb(timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span> / config.fps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//加载图片，执行动画</span></span><br><span class="line">    loadImgs(<span class="function"><span class="keyword">function</span>(<span class="params">imgs</span>) </span>&#123;</span><br><span class="line">        ani(imgs, <span class="function"><span class="keyword">function</span>(<span class="params">timer</span>) </span>&#123;</span><br><span class="line">            <span class="comment">//播放完停留在最后一张</span></span><br><span class="line">            <span class="comment">//clearInterval(timer);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">init();</span><br></pre></td></tr></table></figure>
<h2 id="用css的animation动画实现"><a href="#用css的animation动画实现" class="headerlink" title="用css的animation动画实现"></a>用css的animation动画实现</h2><p><a href="https://zhongs.github.io/frame-animation/css/index.html" target="_blank" rel="noopener">css demo地址</a></p>
<h3 id="首先需要知道的是有多少张图片-用scss生成css代码-会少写很多代码"><a href="#首先需要知道的是有多少张图片-用scss生成css代码-会少写很多代码" class="headerlink" title="首先需要知道的是有多少张图片,用scss生成css代码,会少写很多代码"></a>首先需要知道的是有多少张图片,用scss生成css代码,会少写很多代码</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.animation</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: ani <span class="number">2s</span> infinite steps(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$img_total</span>: <span class="number">20</span>;  <span class="comment">//图片的总数</span></span><br><span class="line"><span class="variable">$img_n</span>: <span class="number">1</span>;       <span class="comment">//图片变量名</span></span><br><span class="line"><span class="variable">$n</span>: <span class="number">0</span>;           <span class="comment">//当前阶段，帧动画</span></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> ani &#123;</span><br><span class="line">  <span class="keyword">@while</span> <span class="variable">$n</span> &lt;= <span class="number">100</span> &#123;</span><br><span class="line">    #&#123;<span class="variable">$n</span>&#125;% &#123;</span><br><span class="line">      <span class="attribute">background-image</span>: url(<span class="string">"http://7xqrwh.com1.z0.glb.clouddn.com/image/frameAni/#&#123;$img_n&#125;.png"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$img_n</span>: <span class="variable">$img_n</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">@if</span> (<span class="variable">$img_n</span>&gt;<span class="variable">$img_total</span>) &#123;</span><br><span class="line">      <span class="variable">$img_n</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$n</span>: <span class="variable">$n</span> + ( <span class="number">100</span> / <span class="variable">$img_total</span> );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="js判断图片是否完成"><a href="#js判断图片是否完成" class="headerlink" title="js判断图片是否完成"></a>js判断图片是否完成</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//1.创建要加载的图片</span></span><br><span class="line"><span class="keyword">var</span> imgs = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imgsArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">21</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> imgSrc = <span class="string">`http://7xqrwh.com1.z0.glb.clouddn.com/image/frameAni/<span class="subst">$&#123;i&#125;</span>.png`</span>;</span><br><span class="line">        imgsArr.push(imgSrc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> imgsArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.加载图片</span></span><br><span class="line"><span class="keyword">var</span> loadImgs = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> loaded = <span class="number">0</span>; <span class="comment">//记录已经加载图片的个数</span></span><br><span class="line">    <span class="keyword">var</span> loadedImgsArr = []; <span class="comment">//用来存放加载的图片</span></span><br><span class="line">    <span class="keyword">var</span> imgsArr = imgs();</span><br><span class="line">    <span class="keyword">var</span> imgObj = <span class="literal">null</span>;</span><br><span class="line">    imgsArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">        imgObj = <span class="keyword">new</span> Image();</span><br><span class="line">        imgObj.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            loaded++;</span><br><span class="line">            <span class="comment">//这里所有的图片加载完成</span></span><br><span class="line">            <span class="keyword">if</span> (loaded == imgsArr.length) &#123;</span><br><span class="line">                fn &amp;&amp; fn(loadedImgsArr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        imgObj.src = imgsArr[index];</span><br><span class="line">        loadedImgsArr.push(imgObj);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加class</span></span><br><span class="line">loadImgs(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelectorAll(<span class="string">'.ani-box'</span>)[<span class="number">0</span>].className += <span class="string">" animation"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="用img标签的src实现"><a href="#用img标签的src实现" class="headerlink" title="用img标签的src实现"></a>用img标签的src实现</h2><p><a href="https://zhongs.github.io/frame-animation/img/index.html" target="_blank" rel="noopener">image标签实现demo</a></p>
<h3 id="首先还是得确保图片全部加载完成，后面就是替换src的一个过程；"><a href="#首先还是得确保图片全部加载完成，后面就是替换src的一个过程；" class="headerlink" title="首先还是得确保图片全部加载完成，后面就是替换src的一个过程；"></a>首先还是得确保图片全部加载完成，后面就是替换src的一个过程；</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.创建要加载的图片</span></span><br><span class="line">   <span class="keyword">var</span> imgs = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> imgsArr = [];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">21</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">var</span> imgSrc = <span class="string">`./img/<span class="subst">$&#123;i&#125;</span>.png`</span>;</span><br><span class="line">           imgsArr.push(imgSrc);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> imgsArr;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//2.加载图片</span></span><br><span class="line">   <span class="keyword">var</span> loadImgs = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> loaded = <span class="number">0</span>; <span class="comment">//记录已经加载图片的个数</span></span><br><span class="line">       <span class="keyword">var</span> loadedImgsArr = []; <span class="comment">//用来存放加载的图片</span></span><br><span class="line">       <span class="keyword">var</span> imgsArr = imgs();</span><br><span class="line">       <span class="keyword">var</span> imgObj = <span class="literal">null</span>;</span><br><span class="line">       imgsArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">           imgObj = <span class="keyword">new</span> Image();</span><br><span class="line">           imgObj.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">               loaded++;</span><br><span class="line">               <span class="comment">//这里所有的图片加载完成</span></span><br><span class="line">               <span class="keyword">if</span> (loaded == imgsArr.length) &#123;</span><br><span class="line">                   fn &amp;&amp; fn(loadedImgsArr);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           imgObj.src = imgsArr[index];</span><br><span class="line">           loadedImgsArr.push(imgObj);</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> config = &#123;</span><br><span class="line">       fps: <span class="number">10</span>, <span class="comment">//每秒10帧</span></span><br><span class="line">       box: <span class="built_in">document</span>.querySelector(<span class="string">'.ani-box'</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建图片标签</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">createImg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">       config.box.appendChild(img);</span><br><span class="line">       <span class="keyword">return</span> img;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//定时器来播放图片</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">imgArr, fn</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> img = createImg();</span><br><span class="line">       <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           img.src = imgArr[n].src;</span><br><span class="line">           n++;</span><br><span class="line">           <span class="keyword">if</span>(n == imgArr.length)&#123;</span><br><span class="line">               n = <span class="number">0</span>;</span><br><span class="line">               fn &amp;&amp; fn(timer);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;, <span class="number">1000</span> / config.fps);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   loadImgs(<span class="function"><span class="keyword">function</span>(<span class="params">imgArr</span>) </span>&#123;</span><br><span class="line">       run(imgArr,<span class="function"><span class="keyword">function</span>(<span class="params">timer</span>)</span>&#123;</span><br><span class="line">           <span class="comment">//clearInterval(timer);</span></span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>
<h2 id="图片转base64的实现"><a href="#图片转base64的实现" class="headerlink" title="图片转base64的实现"></a>图片转base64的实现</h2><p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/frameAni/basegif.gif" alt="动画效果"><br><a href="https://zhongs.github.io/frame-animation/imgBase64/index.html" target="_blank" rel="noopener">转码base64实现demo</a></p>
<h3 id="需要的文件格式"><a href="#需要的文件格式" class="headerlink" title="需要的文件格式"></a>需要的文件格式</h3><p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/frameAni/base64.jpg" alt="图片"></p>
<h3 id="这种实现方式需要，先把图片转成base64格式的；遇到的问题是没有找到，现成的工具转换我需要的格式，于是自己写了个简单的js文件，用nodejs来实现转码任务；"><a href="#这种实现方式需要，先把图片转成base64格式的；遇到的问题是没有找到，现成的工具转换我需要的格式，于是自己写了个简单的js文件，用nodejs来实现转码任务；" class="headerlink" title="这种实现方式需要，先把图片转成base64格式的；遇到的问题是没有找到，现成的工具转换我需要的格式，于是自己写了个简单的js文件，用nodejs来实现转码任务；"></a>这种实现方式需要，先把图片转成base64格式的；遇到的问题是没有找到，现成的工具转换我需要的格式，于是自己写了个简单的js文件，用nodejs来实现转码任务；</h3><h3 id="toBase64-js转码文件"><a href="#toBase64-js转码文件" class="headerlink" title="toBase64.js转码文件"></a>toBase64.js转码文件</h3><p>在cmd命令行，进入当前toBase64.js文件目录下，执行node toBase64，会在img文件夹下生成base64.js文件<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64Img</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = fs.readFileSync(src).toString(<span class="string">'base64'</span>);</span><br><span class="line">    <span class="keyword">return</span> util.format(<span class="string">'data:%s;base64,%s'</span>, <span class="string">'image'</span>, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> outputFile = path.join(__dirname, <span class="string">'./img/'</span>, <span class="string">'base64.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isFile = fs.existsSync(outputFile);</span><br><span class="line"><span class="keyword">if</span> (isFile) &#123;</span><br><span class="line">    fs.unlinkSync(outputFile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> filePath = path.join(__dirname, <span class="string">'./img/'</span>);</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> start = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> end = fs.readdirSync(<span class="string">'./img'</span>).length;</span><br><span class="line"><span class="keyword">for</span> (; start &lt;= end; start++) &#123;</span><br><span class="line">    data[start] = base64Img(filePath + start + <span class="string">'.png'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imgData = &#123;</span><br><span class="line">    key: data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fs.writeFile(outputFile, <span class="string">'var imgData = '</span>+<span class="built_in">JSON</span>.stringify(imgData), <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Completed!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="js逻辑部分"><a href="#js逻辑部分" class="headerlink" title="js逻辑部分"></a>js逻辑部分</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入生成的base64转码文件</span></span><br><span class="line">&lt;script src=<span class="string">"img/base64.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var config = &#123;</span></span><br><span class="line"><span class="regexp">    fps: 10, /</span><span class="regexp">/每秒10帧</span></span><br><span class="line"><span class="regexp">    box: document.querySelector('.ani-box')</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/创建图片标签</span></span><br><span class="line"><span class="regexp">function createImg() &#123;</span></span><br><span class="line"><span class="regexp">    var img = document.createElement('img');</span></span><br><span class="line"><span class="regexp">    config.box.appendChild(img);</span></span><br><span class="line"><span class="regexp">    return img;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/定时器来播放图片</span></span><br><span class="line"><span class="regexp">function run(imgArr, fn) &#123;</span></span><br><span class="line"><span class="regexp">    var img = createImg();</span></span><br><span class="line"><span class="regexp">    var n = 0;</span></span><br><span class="line"><span class="regexp">    var timer = setInterval(function() &#123;</span></span><br><span class="line"><span class="regexp">        img.src = imgArr[n];</span></span><br><span class="line"><span class="regexp">        n++;</span></span><br><span class="line"><span class="regexp">        if (n == imgArr.length) &#123;</span></span><br><span class="line"><span class="regexp">            n = 0;</span></span><br><span class="line"><span class="regexp">            fn &amp;&amp; fn(timer);</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;, 1000 /</span> config.fps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run( imgData.key, <span class="function"><span class="keyword">function</span>(<span class="params">timer</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//clearInterval(timer);</span></span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="所有实现方式源码地址"><a href="#所有实现方式源码地址" class="headerlink" title="所有实现方式源码地址"></a><a href="https://github.com/zhongs/frame-animation" target="_blank" rel="noopener">所有实现方式源码地址</a></h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>4种帧动画的实现方式，原理是大同小异的；</li>
<li>图片一张一张的加载，会增加网络请求数量，转码base64文件会有点大，但能减少网络请求；</li>
<li>实际开发中，需求可能没这么简单，例如：需要循环播放3次，在停留在最后一张图片上；</li>
</ul>
]]></content>
      <tags>
        <tag>帧动画</tag>
      </tags>
  </entry>
  <entry>
    <title>视频转码播放实践</title>
    <url>/2017/11/09/%E8%A7%86%E9%A2%91%E8%BD%AC%E7%A0%81%E6%92%AD%E6%94%BE%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p><img align="center" src="http://7xqrwh.com1.z0.glb.clouddn.com/image/ffmpeg/bg.jpg" width="80%" height="50%"><br>在手机微信客户端播放视频，有一个问题很头疼；那就是video标签，在安卓手机自动弹出一个view窗口全屏播放；于是乎想着把视频资源转码成base64格式的数据，来放到页面播放；<br><a id="more"></a></p>
<h2 id="在转码之前要做下面这些事情"><a href="#在转码之前要做下面这些事情" class="headerlink" title="在转码之前要做下面这些事情"></a>在转码之前要做下面这些事情</h2><h3 id="安装-ffmpeg"><a href="#安装-ffmpeg" class="headerlink" title="安装 ffmpeg"></a>安装 ffmpeg</h3><p>视频的转码要保证自己电脑安装了ffmpeg，首先是下载它。<br><a href="http://ffmpeg.zeranoe.com/builds/" target="_blank">软件安装下载地址：</a></p>
<p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/ffmpeg/1.png" alt="下载地址"></p>
<p>下载下来解压，可以把目录重命名，找个位置放着，比如像这样：</p>
<p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/ffmpeg/2.png" alt="下载地址"></p>
<p>一般来说解压之后还要配置环境变量，不然你在cmd命令行，输入ffmpeg会出现如下情况：</p>
<p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/ffmpeg/4.png" alt="下载地址"></p>
<p>环境变量的配置<br>复制ffmpeg安装包的bin目录</p>
<p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/ffmpeg/3.png" alt="下载地址"></p>
<p>貌似绝大多数，如上图cmd中的问题，都是像下面这样解决；</p>
<p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/ffmpeg/5.png" alt="下载地址"></p>
<h3 id="使用nodejs第三方模块ffmpeg"><a href="#使用nodejs第三方模块ffmpeg" class="headerlink" title="使用nodejs第三方模块ffmpeg"></a>使用nodejs第三方模块ffmpeg</h3><p>ffmpeg模块可以把一个视频，按照配置生成许多一帧一帧的图片和音频mp3文件；<br>之前写过一篇<a href="https://zhongs.github.io/2017/10/23/%E5%AE%9E%E7%8E%B0%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/" target="_blank">《实现逐帧动画的几种方式》</a>的文章，这里我就可以把生成的图片转换成base64格式，然后在用image标签播放</p>
<p>这里是我使用ffmpeg转码视频的部分代码：<br>app.js 这个是任务入口文件； 进到cmd执行 node app 即可将mp4目录下的文件转换成，我想要的帧动画图片和mp3音频文件，并且分别放在dist目录下；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">var</span> ff = <span class="built_in">require</span>(<span class="string">'./lib/ff'</span>);</span><br><span class="line"><span class="keyword">var</span> createBase64 = <span class="built_in">require</span>(<span class="string">'./lib/toBase64'</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'./lib/delete'</span>);</span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    src_path: path.join(__dirname, <span class="string">'./mp4/video.mp4'</span>),</span><br><span class="line">    deleteDirAndFile: path.join(__dirname, <span class="string">'./dist/'</span>),</span><br><span class="line">    save_img_path: path.join(__dirname, <span class="string">'./dist/img/'</span>),</span><br><span class="line">    save_mp3_path: path.join(__dirname, <span class="string">'./dist/mp3/'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除dist目录</span></span><br><span class="line">del.deleteAllSync(config.deleteDirAndFile);</span><br><span class="line"><span class="comment">//生成音频文件</span></span><br><span class="line">ff.createMp3(config.src_path, config.save_mp3_path);</span><br><span class="line"><span class="comment">//生成图片</span></span><br><span class="line">ff.createImg(config.src_path, config.save_img_path, &#123;</span><br><span class="line">    size: <span class="string">'375x667'</span>, <span class="comment">//生成的图片尺寸</span></span><br><span class="line">    frame_rate:<span class="number">10</span> <span class="comment">//一秒内捕获的帧数</span></span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">    <span class="comment">//图片转base64</span></span><br><span class="line">    createBase64(&#123;</span><br><span class="line">        imgPath: config.save_img_path,</span><br><span class="line">        savePath: path.join(__dirname, <span class="string">'./dist/'</span>),</span><br><span class="line">        fps:<span class="number">10</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>./lib/ff.js 这个文件负责创建帧动画图片和音频mp3文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ffmpeg = <span class="built_in">require</span>(<span class="string">'ffmpeg'</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">'./delete'</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  src_path 视频路径</span></span><br><span class="line"><span class="comment"> *  save_path 保存图片的路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createImg</span>(<span class="params">src_path, save_path, config, cb</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    del.createDirSync(save_path);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> process = <span class="keyword">new</span> ffmpeg(src_path);</span><br><span class="line">        <span class="built_in">Object</span>.assign(config, &#123;</span><br><span class="line">            file_name: <span class="string">'img'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        process.then(<span class="function"><span class="keyword">function</span>(<span class="params">video</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// Callback mode</span></span><br><span class="line">            video.fnExtractFrameToJPG(save_path, config, <span class="function"><span class="keyword">function</span>(<span class="params">error, files</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!error)</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'视频转图片成功！'</span>)</span><br><span class="line">                cb &amp;&amp; cb();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.code);</span><br><span class="line">        <span class="built_in">console</span>.log(e.msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * src_path 视频路径</span></span><br><span class="line"><span class="comment"> * save_path_name 生成mp3的文件名路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMp3</span>(<span class="params">src_path, save_path_name, cb</span>) </span>&#123;</span><br><span class="line">    del.createDirSync(save_path_name);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> process = <span class="keyword">new</span> ffmpeg(src_path);</span><br><span class="line">        process.then(<span class="function"><span class="keyword">function</span>(<span class="params">video</span>) </span>&#123;</span><br><span class="line">            video.fnExtractSoundToMP3(save_path_name + <span class="string">'music.mp3'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, file</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!error)</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'提取视频中的音频成功！'</span>)</span><br><span class="line">                cb &amp;&amp; cb()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Error: '</span> + err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e.code);</span><br><span class="line">        <span class="built_in">console</span>.log(e.msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    createImg,</span><br><span class="line">    createMp3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>./lib/delete.js 这个文件有2个方法，用来删除和创建，生成的dist目录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteAllSync</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果文件存在，则返回 true，否则返回 false。</span></span><br><span class="line">    <span class="keyword">if</span> (fs.existsSync(path)) &#123;</span><br><span class="line">        <span class="comment">//返回一个不包括 '.' 和 '..' 的文件名的数组</span></span><br><span class="line">        fs.readdirSync(path).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file, index</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> curPath = path + <span class="string">"/"</span> + file;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * fs.statSync(curPath)  返回一个 fs.Stats 实例</span></span><br><span class="line"><span class="comment">             * 是目录 递归调用</span></span><br><span class="line"><span class="comment">             * 不是目录 删除文件</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (fs.statSync(curPath).isDirectory()) &#123; <span class="comment">// recurse  </span></span><br><span class="line">                deleteAllSync(curPath);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// delete file  </span></span><br><span class="line">                fs.unlinkSync(curPath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        fs.rmdirSync(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归创建目录 同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDirSync</span>(<span class="params">dirname</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(dirname);</span></span><br><span class="line">    <span class="keyword">if</span> (fs.existsSync(dirname)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (createDirSync(path.dirname(dirname))) &#123;</span><br><span class="line">            fs.mkdirSync(dirname);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    deleteAllSync,</span><br><span class="line">    createDirSync</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="前台页面"><a href="#前台页面" class="headerlink" title="前台页面"></a>前台页面</h2><p>index.html 是前端页面逻辑</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> music = <span class="built_in">document</span>.getElementById(<span class="string">"mp3"</span>);</span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">    box: <span class="built_in">document</span>.querySelector(<span class="string">'.ani-box'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Audio/Video DOM 事件 在ios上无效；</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * ios 要播放音频才能监听到DOM事件，不播放监听不到；</span></span><br><span class="line"><span class="comment"> * 安卓 不播放就可以，监听DOM 事件；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">music.play();</span><br><span class="line">music.pause();</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    WeixinJSBridge.invoke(<span class="string">'getNetworkType'</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        music.play();</span><br><span class="line">        music.pause();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建图片标签</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createImg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    config.box.appendChild(img);</span><br><span class="line">    <span class="keyword">return</span> img;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器来播放图片</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">imgArr, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = createImg();</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        img.src = imgArr[n];</span><br><span class="line">        n++;</span><br><span class="line">        <span class="keyword">if</span> (n == imgArr.length) &#123;</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">            fn &amp;&amp; fn(timer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span> / imgData.fps);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//动态加载js文件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pLoadJs</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);　　　　</span><br><span class="line">        script.type = <span class="string">'text/javascript'</span>;　　　　</span><br><span class="line">        script.async = <span class="string">'async'</span>;　　　　</span><br><span class="line">        script.src = url;　　　　</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(script);　　　　</span><br><span class="line">        <span class="keyword">if</span> (script.readyState) &#123; <span class="comment">//IE</span></span><br><span class="line">            script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;　　　　　　　　</span><br><span class="line">                <span class="keyword">if</span> (script.readyState == <span class="string">'complete'</span> || script.readyState == <span class="string">'loaded'</span>) &#123;　　　　　　　　　　</span><br><span class="line">                    script.onreadystatechange = <span class="literal">null</span>;　　　　　　　　　　</span><br><span class="line">                    resolve(<span class="string">'js加载完成'</span>);　　</span><br><span class="line">                &#125;　　　　　　</span><br><span class="line">            &#125;　　　　</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//非IE</span></span><br><span class="line">            script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                resolve(<span class="string">'js加载完成'</span>);</span><br><span class="line">            &#125;　　　　</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pLoadMp3</span>(<span class="params">music</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        music.addEventListener(<span class="string">'canplay'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">//数据已经可以播放(当前位置已经加载) 但没有数据能播放下一帧的内容</span></span><br><span class="line">            <span class="keyword">if</span> (music.readyState &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                resolve(<span class="string">'music加载完成'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当音频和视频同时加载ok，在播放</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">playViode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//音频</span></span><br><span class="line">    music.play();</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">"WeixinJSBridgeReady"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        WeixinJSBridge.invoke(<span class="string">'getNetworkType'</span>, &#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            music.play();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    run(imgData.key, <span class="function"><span class="keyword">function</span>(<span class="params">timer</span>) </span>&#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        alert(<span class="string">'播完了！'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">    pLoadJs(<span class="string">'./dist/base64.js'</span>),</span><br><span class="line">    pLoadMp3(music)</span><br><span class="line">]).then(<span class="function"><span class="keyword">function</span>(<span class="params">posts</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'资源都加载好了！'</span>);</span><br><span class="line">    alert(<span class="string">'资源都加载好了！'</span>);</span><br><span class="line">    playViode();</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    alert(<span class="built_in">JSON</span>.stringify(reason));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>video.pm4视频有770KB，转码后base64.js有512KB，音频文件有157KB<br>最后静态资源都上传到了cdn上面</p>
<ul>
<li><p><a href="http://1251097942.cdn.myqcloud.com/1251097942/cd/zs/mp4-to-base64/index.html" target="_blank">页面效果预览</a></p>
</li>
<li><p><a href="https://github.com/zhongs/mp4-to-base64" target="_blank">项目源码地址</a></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>这种方式能解决安卓手机全屏播放问题</li>
<li>转码文件资源很大，第一次进页面比较慢</li>
<li>视频画面质量有所下降</li>
</ul>
]]></content>
      <tags>
        <tag>全屏播放</tag>
      </tags>
  </entry>
  <entry>
    <title>从单行滚动开始</title>
    <url>/2017/10/29/%E4%BB%8E%E5%8D%95%E8%A1%8C%E6%BB%9A%E5%8A%A8%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<p><img align="center" src="http://7xqrwh.com1.z0.glb.clouddn.com/image/scrollDemo/metal-text.jpg" width="80%" height="50%"><br>这种效果在网页中很常见，实际开发中也经常碰到这样的需求，自己也尝试写了一个这样的效果，下面是我的一个实现方案；<br><a id="more"></a><br><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/scrollDemo/ezgif-4-1fa54824c2.gif" alt="demo效果"></p>
<h2 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h2><h3 id="初始状态"><a href="#初始状态" class="headerlink" title="初始状态"></a>初始状态</h3><p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/scrollDemo/jc1.png" alt="初始状态"></p>
<ul>
<li>假设只有一条滚动数据的时候。最开始，我将这条数据定位到最右边，并且设置它的transform:translate3d(100%,0,0); 这是每条数据的初始状态；</li>
</ul>
<h3 id="运动状态"><a href="#运动状态" class="headerlink" title="运动状态"></a>运动状态</h3><p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/scrollDemo/jc2.png" alt="下一条数据运动时机"></p>
<ul>
<li>通过改变translateX的值，让这条数据移动起来；可以观察到当translate3d(0px,0px,0px)的时候，刚好整条数据移动到屏幕上来，也正好是下一条数据的运动时机；</li>
</ul>
<h3 id="结束状态"><a href="#结束状态" class="headerlink" title="结束状态"></a>结束状态</h3><p><img src="http://7xqrwh.com1.z0.glb.clouddn.com/image/scrollDemo/jc4.png" alt="移除数据"></p>
<ul>
<li>这条数据移动到屏幕外边，当translateX值等于屏幕宽度+自身宽度的时候，是移除数据的时机；</li>
</ul>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><ul>
<li>最开始从接口拿到数据，放在一个ajaxArr数组里面</li>
<li>ajaxArr.shift() 一条数据放入到，另外一个moveArr数组</li>
<li>moveArr数组里面的数据，通过window.requestAnimationFrame来改变translate3d的值，使这条数据运动起来；</li>
<li>当处于“运动状态”中的数据，满足下一条数据运动时机时，我在把ajaxArr.shift()一条数据放入到，moveArr中；</li>
<li>当moveArr中的数据，处于“结束状态”时，把当前这条数据shift()掉；</li>
<li>当moveArr的length长度为0时，没有运动的数据，需要停掉定时器</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监控页面性能</span></span><br><span class="line">    <span class="keyword">var</span> stats = <span class="keyword">new</span> Stats();</span><br><span class="line">    stats.showPanel(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(stats.dom);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame || <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">        <span class="built_in">window</span>.webkitRequestAnimationFrame || <span class="built_in">window</span>.msRequestAnimationFrame || <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cancelAnimationFrame = <span class="built_in">window</span>.cancelAnimationFrame || <span class="built_in">window</span>.mozCancelAnimationFrame || <span class="function"><span class="keyword">function</span>(<span class="params">timer</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.clearTimeout(timer);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> winW = $(<span class="built_in">window</span>).width();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//https://github.com/seajs/seajs/blob/master/dist/runtime-debug.js</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isType</span>(<span class="params">type</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;.toString.call(obj) == <span class="string">"[object "</span> + type + <span class="string">"]"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> isObject = isType(<span class="string">"Object"</span>)</span><br><span class="line">    <span class="keyword">var</span> isString = isType(<span class="string">"String"</span>)</span><br><span class="line">    <span class="keyword">var</span> isArray = <span class="built_in">Array</span>.isArray || isType(<span class="string">"Array"</span>)</span><br><span class="line">    <span class="keyword">var</span> isFunction = isType(<span class="string">"Function"</span>)</span><br><span class="line">    <span class="keyword">var</span> isUndefined = isType(<span class="string">"Undefined"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> scroll = &#123;</span><br><span class="line">        initIsOne: <span class="literal">false</span>, <span class="comment">//接口数据断开，重新链接；</span></span><br><span class="line">        moveTimer: <span class="literal">null</span>, <span class="comment">//定时器</span></span><br><span class="line">        ajaxArr: [], <span class="comment">//接口获取来的数据</span></span><br><span class="line">        moveArr: [], <span class="comment">//要滚动的数据</span></span><br><span class="line">        run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.moveTimer) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.moveTimer = requestAnimationFrame(<span class="keyword">this</span>.move.bind(<span class="keyword">this</span>));</span><br><span class="line">        &#125;,</span><br><span class="line">        stop: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.moveTimer) &#123;</span><br><span class="line">                cancelAnimationFrame(<span class="keyword">this</span>.moveTimer);</span><br><span class="line">                <span class="keyword">this</span>.moveTimer = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        setData: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (isObject(obj)) &#123;</span><br><span class="line">                obj.id = <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">3</span>);</span><br><span class="line">                <span class="keyword">this</span>.ajaxArr.unshift(obj);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (isArray(obj)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class="line">                    obj[i].id = <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">3</span>);</span><br><span class="line">                    <span class="keyword">this</span>.ajaxArr.unshift(obj[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        send: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123; <span class="comment">//点击可以发送</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.setData(obj);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果定时器停了</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.moveArr.length == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.initIsOne = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">this</span>.init();</span><br><span class="line">                <span class="keyword">this</span>.moveTimer = requestAnimationFrame(<span class="keyword">this</span>.move.bind(<span class="keyword">this</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//只要页面滚动的不是最后一个数据，就不能init</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.initIsOne) &#123;</span><br><span class="line">                <span class="keyword">this</span>.initIsOne = <span class="literal">false</span>;</span><br><span class="line">                <span class="comment">//init方法不能同一时间，多次执行，否则ui试图会重叠；</span></span><br><span class="line">                <span class="comment">//执行一次 就可以了，把链接又开起来了</span></span><br><span class="line">                <span class="keyword">this</span>.init();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> obj = <span class="keyword">this</span>.ajaxArr.shift();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (obj) &#123;</span><br><span class="line"></span><br><span class="line">                obj.isTrue = <span class="literal">true</span>; <span class="comment">//避免多次执行</span></span><br><span class="line"></span><br><span class="line">                $(<span class="string">'.app'</span>).append(<span class="string">`&lt;div class="scroll-li <span class="subst">$&#123;obj.id&#125;</span>"&gt;<span class="subst">$&#123;obj.font&#125;</span><span class="subst">$&#123;obj.id&#125;</span>&lt;/div&gt;`</span>);</span><br><span class="line"></span><br><span class="line">                obj.left = $(<span class="string">`.<span class="subst">$&#123;obj.id&#125;</span>`</span>).css(<span class="string">'transform'</span>).split(<span class="string">'('</span>)[<span class="number">1</span>].split(<span class="string">')'</span>)[<span class="number">0</span>].split(<span class="string">','</span>)[<span class="number">4</span>] - <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.moveArr.push(obj);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//对moveArr数组里面的left字段 --</span></span><br><span class="line">        move: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            stats.begin();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.moveTimer = requestAnimationFrame(<span class="keyword">this</span>.move.bind(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.moveArr.length == <span class="number">0</span>) &#123;</span><br><span class="line">                cancelAnimationFrame(<span class="keyword">this</span>.moveTimer);</span><br><span class="line">                <span class="comment">//console.log('定时器停了');</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.moveArr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> obj = <span class="keyword">this</span>.moveArr[i];</span><br><span class="line"></span><br><span class="line">                obj.left--;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//下一个滚动时机</span></span><br><span class="line">                <span class="keyword">if</span> (obj.left &lt;= <span class="number">0</span> &amp;&amp; obj.isTrue) &#123;</span><br><span class="line">                    obj.isTrue = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.ajaxArr.length == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.initIsOne = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">this</span>.init();</span><br><span class="line">                    <span class="comment">// console.log('可以放下一个', this.moveArr);</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//单条播放完</span></span><br><span class="line">                <span class="keyword">if</span> (obj.left &lt;= (-winW)) &#123;</span><br><span class="line">                    $(<span class="string">`.<span class="subst">$&#123;obj.id&#125;</span>`</span>).remove();</span><br><span class="line">                    <span class="keyword">this</span>.moveArr.shift(i, <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// console.log('删了一个');</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                $(<span class="string">`.<span class="subst">$&#123;obj.id&#125;</span>`</span>).css(&#123;</span><br><span class="line">                    <span class="string">'-webkit-transform'</span>: <span class="string">'translate3d('</span> + obj.left + <span class="string">'px, 0, 0)'</span></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            stats.end();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.scroll = scroll;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="初始化和发送"><a href="#初始化和发送" class="headerlink" title="初始化和发送"></a>初始化和发送</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多条数据</span></span><br><span class="line"><span class="keyword">var</span> arr = [&#123; <span class="attr">font</span>:<span class="string">'滚动数据'</span> &#125;];</span><br><span class="line">scroll.send(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//单条数据</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">font</span>:<span class="string">'单条滚动数据'</span>&#125;</span><br><span class="line">scroll.send(obj);</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>没对实现过程进行封装，在使用时需要在init方法，修改插入dom结构</li>
<li>部分地方用的zepto方法，在后面会改成用原生js吧</li>
<li>demo大体上按照自己的想法实现了，效果勉强还行</li>
<li>还有优化的工作要做，例如：<ul>
<li>总结需求，封装js插件</li>
<li>对模块化的支持</li>
<li>滚动是对dom直接添加与删除，能否复用dom结构；避开对dom频繁操作</li>
</ul>
</li>
</ul>
<p><a href="https://zhongs.github.io/scroll/single_scroll/index.html" target="_blank" rel="noopener">demo效果</a></p>
<p><a href="https://github.com/zhongs/scroll/tree/master/single_scroll" target="_blank" rel="noopener">源码地址</a></p>
]]></content>
      <tags>
        <tag>滚动</tag>
      </tags>
  </entry>
</search>
